            if (verbose) {
              message("updateObject(object = 'SeqExpressionSet')")
            }
            object <- callNextMethod()
            if (isCurrent(object)["SeqExpressionSet"]) {
              return(object)
            } else {
              classVersion(object)["SeqExpressionSet"] <- classVersion("SeqExpressionSet")["SeqExpressionSet"]
              object
            }
          })

newSeqExpressionSet <- function(exprs,
                                offset=matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=list(dimnames(exprs))),
                                phenoData=annotatedDataFrameFrom(exprs, FALSE),
                                featureData=annotatedDataFrameFrom(exprs, TRUE),
                                ...) {
  new("SeqExpressionSet",
      assayData=assayDataNew(exprs=exprs,offset=offset),
      phenoData=phenoData,featureData=featureData, ...)
}
data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)),featureData=data.frame(gc=yeastGC[sub]))
dimnames(geneLevelData[sub,])
exprs <- geneLevelData[sub,]
matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=list(dimnames(exprs)))
nrow(exprs)
ncol(exprs)
 list(dimnames(exprs))
str( list(dimnames(exprs)))
str( (dimnames(exprs)))
str( (dimnames(c(0,1))))
dimnames(c(0,1))
newSeqExpressionSet <- function(exprs,
                                offset=matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=dimnames(exprs)),
                                phenoData=annotatedDataFrameFrom(exprs, FALSE),
                                featureData=annotatedDataFrameFrom(exprs, TRUE),
                                ...) {
  new("SeqExpressionSet",
      assayData=assayDataNew(exprs=exprs,offset=offset),
      phenoData=phenoData,featureData=featureData, ...)
}

data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)),featureData=data.frame(gc=yeastGC[sub]))
head(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)))
head(AnnotatedDataFrame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)))
(AnnotatedDataFrame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)))
AnnotatedDataFrame (data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)))
annotatedDataFrame (data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)))
newSeqExpressionSet()
new("SeqExpressionSet")
newSeqExpressionSet(geneLevelData)
newSeqExpressionSet(geneLevelData)
newSeqExpressionSet(geneLevelData)
newSeqExpressionSet(as.matrix(geneLevelData))
?annotatedDataFrameFrom
data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData)),featureData=data.frame(gc=yeastGC[sub]))

data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub]))
)
data
newSeqExpressionSet(geneLevelData[sub,])
newSeqExpressionSet(as.matrix(geneLevelData[sub,]))
newSeqExpressionSet()
?missing
newSeqExpressionSet <- function(exprs=NULL,
                                offset=matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=dimnames(exprs)),
                                phenoData=annotatedDataFrameFrom(exprs, FALSE),
                                featureData=annotatedDataFrameFrom(exprs, TRUE),
                                ...) {
  new("SeqExpressionSet",
      assayData=assayDataNew(exprs=exprs,offset=offset),
      phenoData=phenoData,featureData=featureData, ...)
}
newSeqExpressionSet()
newSeqExpressionSet <- function(exprs,
                                offset=matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=dimnames(exprs)),
                                phenoData=annotatedDataFrameFrom(exprs, FALSE),
                                featureData=annotatedDataFrameFrom(exprs, TRUE),
                                ...) {
  if(missing(exprs)) {}
  new("SeqExpressionSet",
      assayData=assayDataNew(exprs=exprs,offset=offset),
      phenoData=phenoData,featureData=featureData, ...)
}
newSeqExpressionSet()
newSeqExpressionSet <- function(exprs,
                                offset=matrix(data=0,nrow=nrow(exprs),ncol=ncol(exprs),
                                  dimnames=dimnames(exprs)),
                                phenoData=annotatedDataFrameFrom(exprs, FALSE),
                                featureData=annotatedDataFrameFrom(exprs, TRUE),
                                ...) {
  new("SeqExpressionSet",
      assayData=assayDataNew(exprs=exprs,offset=offset),
      phenoData=phenoData,featureData=featureData, ...)
}

data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub]))


data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
data
MDPlot(data,c(1,3))

data
data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))

norm <- betweenLaneNormalization(data,which="full",offset=FALSE)

data
class(data)
class(data)
?betweenLaneNormalization
showMethods("betweenLaneNormalization")
class(data)
getMethod("betweenLaneNormalization","SeqExpressionSet")
class(exprs(data))
assayData=assayDataNew(
                                   exprs=matrix(0L, 0, 0),
                                   offset=matrix(0L, 0, 0)))
assayDataNew(
assayDataNew
  ^C ^C
assayDataNew(exprs=matrix(0L,0,0),offset=matrix(0L,0,0))
a <- assayDataNew(exprs=matrix(0L,0,0),offset=matrix(0L,0,0))
a
a@offset
str(a)
get(offset,a)
?assayData
get(a,offset)
get(a,"offset)
"
"
get(a,"offset")
get(a,"exprs")
?get
get("exprs",envir=a)
?assayDataElement
class(get("exprs",envir=a))
data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))

data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))

mat <- as.matrix(geneLevelData[sub,])

data <- newSeqExpressionSet(geneLevelData[sub,],phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
data <- newSeqExpressionSet(mat,phenoData=AnnotatedDataFrame(data.frame(conditions=factor(c("mut","mut","wt","wt")),row.names=colnames(geneLevelData))),featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))

norm <- betweenLaneNormalization(data,which="full",offset=FALSE)

x <- data
new("SeqExpressionSet",exprs=betweenLaneNormalization(exprs(x),which,offset),phenoData=phenoData(x),featureData=featureData(x))
new("SeqExpressionSet",exprs=betweenLaneNormalization(exprs(x),"full",FALSE),phenoData=phenoData(x),featureData=featureData(x))
newSeqExpressionSet(exprs=betweenLaneNormalization(exprs(x),"full",FALSE),phenoData=phenoData(x),featureData=featureData(x))
norm <- betweenLaneNormalization(data,which="full",offset=FALSE)

setMethod(
          f = "betweenLaneNormalization",
          signature = signature(x="SeqExpressionSet"),
          definition = function(x,which=c("median","upper","full"),offset=FALSE) {
            if(offset) {
              if(all(offst(x)==0)) {
                newSeqExpressionSet(exprs=exprs(x),phenoData=phenoData(x),featureData=featureData(x),offset=betweenLaneNormalization(exprs(x),which,offset))
              } else {
                counts <- exp(log(exprs(x))+offst(x))
                newSeqExpressionSet(exprs=exprs(x),phenoData=phenoData(x),featureData=featureData(x),offset=offst(x)+betweenLaneNormalization(counts,which,offset))
              }
            }
            else {
              newSeqExpressionSet(exprs=betweenLaneNormalization(exprs(x),which,offset),phenoData=phenoData(x),featureData=featureData(x))
            }
          }
          )
norm <- betweenLaneNormalization(data,which="full",offset=FALSE)

norm
counts <- newSeqExpressionSet(exprs,phenoData=data.frame(conditions=cond))

exprs <- matrix(data=0,nrow=100,ncol=4)
for(i in 1:4) {
exprs[,i] <- rpois(100,lambda=50)
}
cond <- c(rep("A",2),rep("B",2))

counts <- newSeqExpressionSet(exprs,phenoData=data.frame(conditions=cond))
counts
q()
n
q()
n
fastq
?yeastRNASeq
vignette("yeastRNASeq")
files
files
files
files
files
bfs
gt
lane
geno
pd
?BamFileList
elementMetaData(bfs[[1]])
elementMetaData
?BamFileList
BamFileList
getClass("BamFileList")
BamFileList
elementMetadata(bfs)
elementMetadata(bfs) <- pd
bfs
elementMetadata(bfs)
?"barplot-methods"
showMethods("barplot")
getMethod("barplot","FastqFileList")
class(fastq)
sapply(height, function(x) length(readFastq(x)))
sapply(fastq, function(x) length(readFastq(x)))
barplot(sapply(fastq, function(x) length(readFastq(x))))
class(fastq)
debug(barplot)
undebug(barplot)
barplot(fastq,las=2,col=colors)
getMethods("barplot","ANY")
getMethods("barplot","ANY")
getMethods("barplot","ANY")
getMethod("barplot","ANY")
names(bfs)
names(fastq)
barplot(bfs,las=2,col=colors)
barplot(bfs,las=2,col=colors,unique=T)
barplot(bfs,las=2,col=colors,unique=T)
colors
barplot(bfs,las=2,col=colors,unique=F)
colors
barplot(bfs,las=2,col=c(1,2),unique=F)
barplot(bfs,las=2,col=c(1,2),unique=T)
barplot(bfs,las=2,unique=F)
barplot(bfs,las=2,unique=F,col=colors)
barplot(bfs,las=2,unique=T,col=colors[c(1,3)])
legend("topright",c("unique","non-unique"),fill=colors[c(1,3)])
bfs[[1]]
x <- bfs[[1]]
scanBam(x,param=ScanBamParam(what="seq")))$seq
(scanBam(x,param=ScanBamParam(what="seq")))$seq
scanBam(x,param=ScanBamParam(what="seq")))
scanBam(x,param=ScanBamParam(what="seq"))
unlist(scanBam(x,param=ScanBamParam(what="seq")))
length(unlist(scanBam(x,param=ScanBamParam(what="seq"))))
length(unlist(scanBam(x,param=ScanBamParam(what="seq")))$seq)
countBam(height)$records
countBam(x)$records
unique(unlist(scanBam(x,param=ScanBamParam(what="seq")))$seq)
?scanBam
unique(unlist(scanBam(x,param=ScanBamParam(what=c("seq","pos"))))$seq)
unlist(scanBam(x,param=ScanBamParam(what=c("seq","pos"))))
param <- ScanBamParam(what=c("seq","pos"))
?scanBam
?filterBam
?scanBamParam
?ScanBamParam
param <- ScanBamParam(what=c("qual"))
scanBam(x,param=ScanBamParam(what="seq"))
scanBam(x,param=ScanBamParam(what="qual"))
scanBam(x,param=ScanBamParam(what="mapq"))
`
-10*log10(0)
10^(-250)
x
tmpscanBam
str(tmp)
head(tmp[[1]])
str(unlist(tmp))
names(tmp)
names(tmp[[1]])
names(bam)
lapply(bam,class)
class(unlist(bam))
head(lst)
class(tmp)
class(lst)
names(lst)
lapply(lst,head)
head(lst$seq)
head(sread(lst$seq))
?"DNASrtringSet-class"
?"DNAStringSet-class"
unique((lst$seq))
which(unique((lst$seq)))
which(is.unique((lst$seq)))
(is.unique((lst$seq)))
rownames(unique((lst$seq)))
getClass("DNAStringSet")
unique((lst$seq))
unique((lst$seq))@seq
barplot(bfs,las=2,col=colors)
x <- bfs[[1]]
fq
            param <- ScanBamParam(what=c("strand","qual"))
`
param
str(bam)
str(unlist(bam))
str(bam)
fq
fq
strand
fq[1:2]
fq[strand=="+"]
fq
?"PhredQuality-class"
?"DNAString-class"
?"XString-class"
head(as(fq,"matrix"))
dim(quality)
dim(quality)
              plot(colMeans(quality))
plotQuality(bfs,col=colors,lty=1)
plotQuality(bfs,col=colors,lty=1)
plotQuality(bfs,col=colors)
elementMetaData(bfs)
elementMetadata(bfs)
elementMetadata(bfs)[,1]
levels(elementMetadata(bfs)[,1])
unique(elementMetadata(bfs)[,1])
plotQuality(bfs[[1]])
plotQuality(bfs[[1]])
plotQuality(bfs[[1]])
plotQuality(bfs[[1]],cex.axis=.8)
strand
res
head(nt)
dim(nt)
dim(nt)
            matplot(nt, xlab = "Cycle", ylab = "Nt frequency", type = "l", lty=1, col=1:5,)
t(alphabetByCycle(res[strand=="-"]))[NROW(nt):1,]
t(alphabetByCycle(res[strand=="-"]))[NROW(nt):1,]
dim(t(alphabetByCycle(res[strand=="-"]))[NROW(nt):1,])
dim(nt)
            matplot(nt, xlab = "Cycle", ylab = "Nt frequency", type = "l", lty=1, col=1:5)
q()
n
library(EDAseq)
library(EDASeq)
showMethods("plotQuality")
class(bfs)
getMethod("plotQuality","BamFileList")
plotQuality(bfs,lty=1)
getMethod("plotQuality","BamFileList")
showMethods("plotQuality")
q()
n
FastqFileList
?FastqFileList
q()
n
?FastqFileList
FastqFileList
BamFileList
?BamFileList
?FastqFileList
files
fastwq
fastq
plotQuality(fastq)
?FastqFileList
fastq[[1]]
fastqSampler(fastq[[1]],50)
FastqSampler(fastq[[1]],50)
FastqSampler(fastq,n=100)
plotQuality(FastqSampler(fastq,n=100))
getClass("FastqSampler")
?"FastqSampler-class"
prova <- FastqSampler(fastq[[1]],n=100)
fastq[[1]]
prova
fq <- 
x <- prova
yield(f)
yield(x)
x
 fl <- fastq[[1]]
fl
fl
fastq
files
files[[1]]
prova
as.list(prova
)
as.list(fastq)
x <- fastq
            quals <- lapply(x, function(x) {
              fq <- quality(readFastq(x))
              wd <- unique(width(fq))
              if (1L != length(wd)) {
                minwd <- min(wd)
                message("reducing width to trailing ", minwd,
                        "\n  path: ", x)
                fq <- narrow(fq, end(fq) - minwd + 1L, end(fq))
              }
              colMeans(as(fq, "matrix"))
            })

quaks
quals
f
f
x <- fastq[[1]]
x
readFastq(x)
     f <- FastqSampler(x, 50)
f
readFastq(f)
readFastq(yield(f))
yield(f)
f
yield(f)
     f <- FastqSampler(x, 50)
f
yield(f)
x
fl
x
files
files[[1]]
FastqSampler(files[[1]])
FastqSampler(x)
FastqSampler(files[[1]])
yield(FastqSampler(files[[1]]))
FastqSampler
x
names(x)
str(x)
as.character(x)
x
files(x)
file(x)
file(files[[1]])
as.file(x)
x
fastq
files
names(fastq)
fastq
str(fastq)
str(fastq[[1]])
fastq[[1]]@.xData
get(fastq[[1]]@.xData)
get(ls,fastq[[1]]@.xData)
do(ls,fastq[[1]]@.xData)
barplot(fastq)
fastq
library(EDASeq)
fastq
barplot(fastq)
showMethods("barplot")
class(fastq)
barplot(fastq)
q()
n
barplot(fastq)
sapply(fastq,function(x) length(readFasrq(x)))
sapply(fastq,function(x) length(readFastq(x)))
x <- sapply(fastq,function(x) length(readFastq(x)))
class(x)
barplot(x)
barplot(fastq)
class(fastq)
showMethods("as.list")
getMethod("as.list","SimpleList")
getClass("SimpleList")
barplot(bfs)
barplot(bfs)
barplot(fastq)
getMethod("as.list","BamFileList")
getMethod("as.list","FastqFileList")
getMethod("as.list","SimpleList")
as.list
q()
n
barplot(fastq)
as.list.default
as.list(fastq)
q()
n
library(EDASeq)
barplot(fastq)
x
unlist(x)
            barplot(unlist(x))
q()
n
